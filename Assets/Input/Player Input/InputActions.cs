//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Input/Player Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Dekstop"",
            ""id"": ""6c27bb7f-0864-451d-b068-8f5f63f60f8b"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""344af24e-94f2-4ebc-8c4b-9071b6eb727e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""fb2714f4-4e8a-4908-a4d0-04205f051d56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52174d7d-11d4-490a-be77-f2968b09a379"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62bee0b1-5aff-4dfe-be70-a0d7936e3e4b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dekstop
        m_Dekstop = asset.FindActionMap("Dekstop", throwIfNotFound: true);
        m_Dekstop_Pause = m_Dekstop.FindAction("Pause", throwIfNotFound: true);
        m_Dekstop_Unpause = m_Dekstop.FindAction("Unpause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dekstop
    private readonly InputActionMap m_Dekstop;
    private List<IDekstopActions> m_DekstopActionsCallbackInterfaces = new List<IDekstopActions>();
    private readonly InputAction m_Dekstop_Pause;
    private readonly InputAction m_Dekstop_Unpause;
    public struct DekstopActions
    {
        private @InputActions m_Wrapper;
        public DekstopActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Dekstop_Pause;
        public InputAction @Unpause => m_Wrapper.m_Dekstop_Unpause;
        public InputActionMap Get() { return m_Wrapper.m_Dekstop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DekstopActions set) { return set.Get(); }
        public void AddCallbacks(IDekstopActions instance)
        {
            if (instance == null || m_Wrapper.m_DekstopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DekstopActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Unpause.started += instance.OnUnpause;
            @Unpause.performed += instance.OnUnpause;
            @Unpause.canceled += instance.OnUnpause;
        }

        private void UnregisterCallbacks(IDekstopActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Unpause.started -= instance.OnUnpause;
            @Unpause.performed -= instance.OnUnpause;
            @Unpause.canceled -= instance.OnUnpause;
        }

        public void RemoveCallbacks(IDekstopActions instance)
        {
            if (m_Wrapper.m_DekstopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDekstopActions instance)
        {
            foreach (var item in m_Wrapper.m_DekstopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DekstopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DekstopActions @Dekstop => new DekstopActions(this);
    public interface IDekstopActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnUnpause(InputAction.CallbackContext context);
    }
}
